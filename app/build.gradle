import io.gitlab.arturbosch.detekt.Detekt

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.navigation.safeargs.kotlin'
}
apply from: "$rootDir/plugins/android-build.gradle"
apply from: "$rootDir/config/detekt/detekt-build.gradle"

def keystorePropertiesFile = rootProject.file("$rootDir/keystore/keystore.properties")

android {
    namespace Config.namespace

    defaultConfig {
        applicationId Config.applicationId
        versionCode Config.versionCode
        versionName Config.versionName
    }
    signingConfigs {
        if (keystorePropertiesFile.exists()) {
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

            signing {
                storeFile rootProject.file(keystoreProperties['STORE_FILE'])
                storePassword keystoreProperties['STORE_PASSWORD']
                keyPassword keystoreProperties['KEY_PASSWORD']
                keyAlias keystoreProperties['KEY_ALIAS']
            }
        }
    }
    buildTypes.configureEach { buildType ->
        if (buildType.name == 'staging' || buildType.name == 'release') {
            if (keystorePropertiesFile.exists()) {
                buildType.signingConfig = signingConfigs.signing
            } else {
                println("keystore.properties not found for ${buildType.name} variant, skipping signing config")
            }
        }
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation', 'ExtraTranslation'
        xmlReport true
    }
}

tasks.withType(Detekt).configureEach {
    reports {
        xml.required.set(true)
        html.required.set(true)
        txt.required.set(false)
        sarif.required.set(false)
        md.required.set(false)
    }
}

dependencies {
    // Libs
    implementation(libs.navigationFragment)
    implementation(libs.navigationUi)
    implementation(libs.jodaTime)

    // Modules
    implementation project(Modules.arch)
    implementation project(Modules.design)
    implementation project(Modules.extension)
    implementation project(Modules.domain)
    implementation project(Modules.navigation)
    implementation project(Modules.local)
    implementation project(Modules.details)
    implementation project(Modules.about)
    implementation project(Modules.decrypt)
    implementation project(Modules.encrypt)
    implementation project(Modules.lock)
    implementation project(Modules.security)
    implementation project(Modules.test)
    implementation project(Modules.logger)
}
